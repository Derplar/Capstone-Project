{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\553394\\\\eclipse-workspace\\\\spring-boot-fullstack-crud-full-stack-with-maven\\\\REACT TEST\\\\REACT\\\\src\\\\ListCoursesComponent.jsx\";\nimport React, { Component } from 'react';\nimport CourseDataService from './CourseDataService';\nimport ButtonDataService from './ButtonDataService'; //This is the main 'react' file for this example.\n\nclass ListCoursesComponent extends Component {\n  //A proper constructor for when this class is created.  The other classes just have default states.\n  //Props exist as a component.  Do not put methods in here no matter what.  Just datatypes.   \n  constructor(props) {\n    super(props); //Whenever state is called in any form, render is refreshed.  This right here?\n    //This is why react is special.  Think of state as class level variables.\n\n    this.state = {\n      courses: [],\n      message: 'Testeroni'\n    };\n  } //This method runs pretty much right after the constructor.  \n  //This is best used to actually load the data.\n\n\n  componentDidMount() {\n    this.refreshCourses();\n  } //Just a regular old method.\n\n\n  refreshCourses() {\n    //Calls the CourseDataService function.  Go there if you want to know more about it.\n    CourseDataService.retrieveAllCourses(\"in28minutes\") //HARDCODED\n    //After it's done, it will then do this.\n    .then( //The response is the chunk of code that was returned from the CourseDataService.\n    response => {\n      //Print is to the console\n      console.log(response); //Set the state.  Remember, once the state is changed, render is run again.\n      //We're setting ONLY the courses, and courses is an array of -something-.\n\n      this.setState({\n        courses: response.data\n      });\n    });\n  } //Same thing as refreshCourses\n\n\n  getButton() {\n    ButtonDataService.retrieveButtonName().then(response => {\n      console.log(response); //We're setting ONLY the message, and it is a string.\n\n      this.setState({\n        message: response.data\n      });\n    });\n  }\n\n  callButton() {\n    this.getButton();\n  } //Cannot put comments in render, just so you know.\n  //When you call something out of the render function, put it in curly braces {}.\n  //Because of how React is set up, you must declare an anonymous function and have it point\n  //to the method.  This is a simple lambda reference.\n  //The this.state.courses.map is basically converting the array into a dictionary.  From 3rd semester, remember?\n  //Then it automatically goes through every element in the map and creates a table row based on what course it's on.\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"All Courses\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Id\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Description\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.courses.map(course => React.createElement(\"tr\", {\n      key: course.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, course.id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, course.description))))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.callButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.message)));\n  }\n\n}\n\nexport default ListCoursesComponent;","map":{"version":3,"sources":["C:/Users/553394/eclipse-workspace/spring-boot-fullstack-crud-full-stack-with-maven/REACT TEST/REACT/src/ListCoursesComponent.jsx"],"names":["React","Component","CourseDataService","ButtonDataService","ListCoursesComponent","constructor","props","state","courses","message","componentDidMount","refreshCourses","retrieveAllCourses","then","response","console","log","setState","data","getButton","retrieveButtonName","callButton","render","map","course","id","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CAEA;;AACA,MAAMC,oBAAN,SAAmCH,SAAnC,CAA6C;AAEzC;AACA;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,EADA;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIH,GAZwC,CAczC;AACA;;;AACAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,cAAL;AACH,GAlBwC,CAoBzC;;;AACAA,EAAAA,cAAc,GAAG;AACb;AACAT,IAAAA,iBAAiB,CAACU,kBAAlB,CAAqC,aAArC,EAAmD;AAC/C;AADJ,KAEKC,IAFL,EAGQ;AACAC,IAAAA,QAAQ,IAAI;AACR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAFQ,CAGR;AACA;;AACA,WAAKG,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAEM,QAAQ,CAACI;AAApB,OAAd;AACH,KAVT;AAYH,GAnCwC,CAqCzC;;;AACAC,EAAAA,SAAS,GAAG;AACRhB,IAAAA,iBAAiB,CAACiB,kBAAlB,GACKP,IADL,CAEQC,QAAQ,IAAI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADQ,CAER;;AACA,WAAKG,QAAL,CAAe;AAACR,QAAAA,OAAO,EAAEK,QAAQ,CAACI;AAAnB,OAAf;AACH,KANT;AAQH;;AAEDG,EAAAA,UAAU,GAAG;AACT,SAAKF,SAAL;AACH,GAnDwC,CAqDzC;AACA;AACA;AACA;AACA;AACA;;;AACAG,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CADJ,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGQ,KAAKf,KAAL,CAAWC,OAAX,CAAmBe,GAAnB,CACIC,MAAM,IACF;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,MAAM,CAACC,EAAZ,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,MAAM,CAACE,WAAZ,CAFJ,CAFR,CAHR,CAPJ,CADJ,EAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBJ,EAuBI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,MAAM,KAAKL,UAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyD,KAAKd,KAAL,CAAWE,OAApE,CAvBJ,CAFJ,CADJ;AA8BH;;AA1FwC;;AA6F7C,eAAeL,oBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport CourseDataService from './CourseDataService';\r\nimport ButtonDataService from './ButtonDataService';\r\n\r\n//This is the main 'react' file for this example.\r\nclass ListCoursesComponent extends Component {\r\n\r\n    //A proper constructor for when this class is created.  The other classes just have default states.\r\n    //Props exist as a component.  Do not put methods in here no matter what.  Just datatypes.   \r\n    constructor(props) {\r\n        super(props)\r\n        //Whenever state is called in any form, render is refreshed.  This right here?\r\n        //This is why react is special.  Think of state as class level variables.\r\n        this.state = {\r\n            courses: [],\r\n            message: 'Testeroni'\r\n        }\r\n    }\r\n\r\n    //This method runs pretty much right after the constructor.  \r\n    //This is best used to actually load the data.\r\n    componentDidMount() {\r\n        this.refreshCourses();\r\n    }\r\n\r\n    //Just a regular old method.\r\n    refreshCourses() {\r\n        //Calls the CourseDataService function.  Go there if you want to know more about it.\r\n        CourseDataService.retrieveAllCourses(\"in28minutes\")//HARDCODED\r\n            //After it's done, it will then do this.\r\n            .then(\r\n                //The response is the chunk of code that was returned from the CourseDataService.\r\n                response => {\r\n                    //Print is to the console\r\n                    console.log(response);\r\n                    //Set the state.  Remember, once the state is changed, render is run again.\r\n                    //We're setting ONLY the courses, and courses is an array of -something-.\r\n                    this.setState({ courses: response.data })\r\n                }\r\n            )\r\n    }\r\n    \r\n    //Same thing as refreshCourses\r\n    getButton() {\r\n        ButtonDataService.retrieveButtonName()\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    //We're setting ONLY the message, and it is a string.\r\n                    this.setState( {message: response.data})\r\n                }\r\n            )\r\n    }\r\n\r\n    callButton() {\r\n        this.getButton();\r\n    }\r\n    \r\n    //Cannot put comments in render, just so you know.\r\n    //When you call something out of the render function, put it in curly braces {}.\r\n    //Because of how React is set up, you must declare an anonymous function and have it point\r\n    //to the method.  This is a simple lambda reference.\r\n    //The this.state.courses.map is basically converting the array into a dictionary.  From 3rd semester, remember?\r\n    //Then it automatically goes through every element in the map and creates a table row based on what course it's on.\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>All Courses</h3>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Description</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            \r\n                            {\r\n                                this.state.courses.map(\r\n                                    course =>\r\n                                        <tr key={course.id}>\r\n                                            <td>{course.id}</td>\r\n                                            <td>{course.description}</td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <br>\r\n                    </br>\r\n                    <button type=\"button\" onClick={() => this.callButton()}>{this.state.message}</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCoursesComponent"]},"metadata":{},"sourceType":"module"}